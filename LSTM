% after frequency

clear;
close all;

load normal_A.mat
data = file';


numChannels = size(data{1},1); 

figure(1)
tiledlayout(3,2)
for i = 1:6
    nexttile
    stackedplot(data{i}')

    xlabel("Time Step")
end


numObservations = numel(data); 

rate = 0.9;
idxTrain = 1:floor(rate*numObservations); 
idxTest = floor(rate*numObservations)+1:numObservations; 

dataTrain = data(idxTrain); 
dataTest = data(idxTest); 


for n = 1:numel(dataTrain)
    X = dataTrain{n};
    XTrain{n} = X(:,1:end-1); 
    TTrain{n} = X(:,2:end);
end

% Training
muX = mean(cat(2,XTrain{:}),2);
sigmaX = std(cat(2,XTrain{:}),0,2);

muT = mean(cat(2,TTrain{:}),2);
sigmaT = std(cat(2,TTrain{:}),0,2);

for n = 1:numel(XTrain)
    XTrain{n} = (XTrain{n} - muX) ./ sigmaX;
    TTrain{n} = (TTrain{n} - muT) ./ sigmaT;
end


layers = [
    sequenceInputLayer(numChannels)
    lstmLayer(128)
    fullyConnectedLayer(numChannels)
    regressionLayer];

options = trainingOptions("adam", ...
    MaxEpochs=200, ...
    SequencePaddingDirection="left", ...
    Shuffle="every-epoch", ...
    Plots="training-progress", ...
    Verbose=0);

net = trainNetwork(XTrain,TTrain,layers,options);

% Test
for n = 1:size(dataTest,1) 
    X = dataTest{n}; 
    XTest{n} = (X(:,1:end-1) - muX) ./ sigmaX; 
    TTest{n} = (X(:,2:end) - muT) ./ sigmaT; 
end

YTest = predict(net,XTest,SequencePaddingDirection="left");


for i = 1:size(YTest,1)
    rmse(i) = sqrt(mean((YTest{i} - TTest{i}).^2,"all"));
end

figure(2)
histogram(rmse)
xlabel("RMSE")
ylabel("Frequency")

mean(rmse)

%%

save("normal_A.mat", "net", "muX", "sigmaX", "muT", "sigmaT","rmse");


%% 
idx = 1;
X = XTest{idx};
T = TTest{idx};

figure(3)
stackedplot(X',DisplayLabels="Channel " + (1:numChannels))
xlabel("Time Step")
title("Test Observation " + idx)

%%
net = resetState(net);
offset = 100;
[net,Z] = predictAndUpdateState(net,X(:,1:offset));


numPredictionTimeSteps = 250; % 2 steps
Xt = Z(:,end);
Y = zeros(numChannels,numPredictionTimeSteps);

for t = 1:numPredictionTimeSteps
    [net,Y(:,t)] = predictAndUpdateState(net,Xt);
    Xt = Y(:,t);
end

