
clear; 
close all;

Mpath = "/Users/";

Movpath = "/Users/";


datalength = 100;
RMSEwidth = 50; 
% alpha = 1;

subject = "A";
sw_anime = false;
sw_savemov = false;

file = "normal_" + subject + ".mat";
movfile = "movie_" + subject +"_obstacle_lab.mp4";

switch subject
    case "A"
        load acc_00964.mat
        load normal_rmse_max_A.mat
        avg_rmse = 1.3062451;
        alpha = 1.00;
        % range = 504:3108; % A 954
        range = 406:1204;
    case "B"
       load acc_01000.mat
       load normal_rmse_max_B.mat
       avg_rmse = 0.9076071;
       alpha = 1.00;
       range = 648:1448; % B 992
end

load(fullfile(Mpath, file), "net", "muX", "sigmaX", "muT", "sigmaT");

% Acc : Acceleration (timestep, dim)
dt = 0.01;
Acc = Acc;
Acc = Acc(range,:);

t = (1:size(Acc, 1))'*dt;

Nframe = size(Acc, 1);
Target = 3; % dim

detect = []; 


threshold = avg_rmse*alpha; % RMSEの判定閾値
YLim = [-10 10];


if sw_savemov
    sw_anime = true;
    mov = VideoWriter(fullfile(Movpath, movfile), "MPEG-4");
    mov.FrameRate = round(1/(t(2)-t(1)));
    mov.Quality = 100;
    open(mov);
end

%% データの図示
dt = 0.01;
t = (1:size(Acc, 1))'*dt;
fig = f_setOuterPosition([1 1], 1, 1, 1, figure);
% fig = figure("WindowState", "maximized");
subplot(2, 1, 1);
hdetect = plot(NaN, NaN, "g", "LineWidth", 5, "DisplayName", "Detect");
hold on
% xline(1:9, "--", "HandleVisibility", "off", "LineWidth", 2, "Color", "k");
hraw = plot(NaN, NaN, "b-", "LineWidth", 5, "DisplayName", "Raw data");
hpredict = plot(NaN, NaN, "r--", "LineWidth", 5, "DisplayName", "Prediction");
% hcurrent = xline(NaN, "k", "DisplayName", "Current", "LineWidth", 3);
xlim([0 t(end)]);
ylim(YLim);
switch subject
%     case "A"
%         xline(3.36,'LineWidth',4,'Color',"#A2142F", "DisplayName", "Contact")
%     case "B"
%         xline(1.25,'LineWidth',4,'Color',"#A2142F", "DisplayName", "Contact")
end
set(gca, "FontName", "Arial", "FontSize", 36);
xlabel("Time [s]");
ylabel(["Normalized" ,"acceleration [-]"]);
legend();

subplot(2, 1, 2);
hdetect2 = plot(NaN, NaN, "g", "LineWidth", 5, "DisplayName", "Detect");
hold on;
% xline(1:9, "--", "HandleVisibility", "off", "LineWidth", 2, "Color", "k");
hrmse = plot(NaN, NaN, "m", "LineWidth", 5, "DisplayName", "RMSE");
% hcurrent2 = xline(NaN, "k", "DisplayName", "Current", "LineWidth", 3);
switch subject
%     case "A"
%         xline(3.36,'LineWidth',4,'Color',"#A2142F", "DisplayName", "Contact")
%     case "B"
%         xline(1.25,'LineWidth',4,'Color',"#A2142F", "DisplayName", "Contact")
end
yline(threshold,'Color',"#0072BD", 'LineWidth', 5, "DisplayName", "Threshold");
xlim([0 t(end)]);
ylim([0 5]);
xlabel("Time [s]");
ylabel("RMSE [-]")
set(gca, "FontName", "Arial", "FontSize", 36);
legend();

f = gcf;
f.Color = "w";

%%
k = 0;
RMSE = zeros(Nframe, 1);
Acc_predict = nan(Nframe, 1);
for frame = 1:Nframe
    if sw_anime 
        hcurrent.Value = t(frame);
        hcurrent2.Value = t(frame);
        hraw.XData = t(1:frame);
        hraw.YData = Acc(1:frame, Target);
    end
    if k > 0
        if frame-datalength < RMSEwidth
            width = k;
        else
            width = RMSEwidth;
        end
        
        RMSE(frame) = rmse(Acc_predict(frame-width+1:frame, 1), Acc(frame-width+1:frame, Target));
        if sw_anime
            hrmse.XData = t(1:frame);
            hrmse.YData = RMSE(1:frame);
        end

        if RMSE(frame) > threshold
            detect = cat(1, detect, frame);
            if sw_anime
                hdetect.XData = [NaN; repelem(t(detect), 3, 1)];
                hdetect.YData = [hdetect.YData, YLim NaN];
                hdetect2.XData = [NaN; repelem(t(detect), 3, 1)];
                hdetect2.YData = [hdetect2.YData, YLim NaN];
            end
        end
        k = k + 1;
    end

    if rem(frame, datalength) == 0 && frame~=Nframe
        

        net = resetState(net);
        [net, Z] = predictAndUpdateState(net, Acc(frame-datalength+1:frame, :)'); 
        numPredictionTimeSteps = datalength;

        Xt = Z(:, end);
        Y = zeros(3, numPredictionTimeSteps);

        for i = 1:numPredictionTimeSteps
            [net, Y(:,i)] = predictAndUpdateState(net, Xt);
            Xt = Y(:,i);
        end
        if Nframe-frame >= datalength
            Acc_predict(frame+(1:datalength), 1) = Y(Target, :)';
        else
            Acc_predict(frame+1:end, 1) = Y(Target, 1:Nframe-frame)';
        end

        if sw_anime
           
            if Nframe-frame >= datalength
                hpredict.XData = t(1:frame+datalength);
                hpredict.YData = Acc_predict(1:frame+datalength, 1);
            else
                hpredict.XData = t;
                hpredict.YData = Acc_predict;
            end

        end
        
        k = 1;
    end
    
    drawnow
    if sw_savemov
        writeVideo(mov, getframe(fig));
    end
end
if ~sw_anime
    hraw.XData = t;
    hraw.YData = Acc(1:end, Target);
    hrmse.XData = t;
    hrmse.YData = RMSE;
    if ~isempty(detect)
        hdetect.XData = repelem(t(detect), 3, 1);
        hdetect.YData = repmat([YLim'; NaN], length(detect), 1);
        hdetect2.XData = repelem(t(detect), 3, 1);
        hdetect2.YData = repmat([YLim'; NaN], length(detect), 1);
    end
    hpredict.XData = t;
    hpredict.YData = Acc_predict;
end
legend(subplot(2, 1, 1));
legend(subplot(2, 1, 2));
if sw_savemov
    close(mov);
end

save("obstacle_rmse_" + subject + ".mat", "RMSE");

